// Code generated by protoc-gen-gogo.
// source: pathfs.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pathfs.proto

It has these top-level messages:
	Status
	Owner
	Context
	StringRequest
	StringResponse
	SetDebugRequest
	SetDebugResponse
	Attr
	GetAttrRequest
	GetAttrResponse
	ChmodRequest
	ChmodResponse
	ChownRequest
	ChownResponse
	UtimensRequest
	UtimensResponse
	TruncateRequest
	TruncateResponse
	AccessRequest
	AccessResponse
	LinkRequest
	LinkResponse
	MkdirRequest
	MkdirResponse
	MknodRequest
	MknodResponse
	RenameRequest
	RenameResponse
	RmdirRequest
	RmdirResponse
	UnlinkRequest
	UnlinkResponse
	GetXAttrRequest
	GetXAttrResponse
	ListXAttrRequest
	ListXAttrResponse
	RemoveXAttrRequest
	RemoveXAttrResponse
	SetXAttrRequest
	SetXAttrResponse
	File
	OpenRequest
	OpenResponse
	CreateRequest
	CreateResponse
	DirEntry
	OpenDirRequest
	OpenDirResponse
	SymlinkRequest
	SymlinkResponse
	ReadlinkRequest
	ReadlinkResponse
	StatFs
	StatFsRequest
	StatFsResponse
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_hanwen_go_fuse_fuse "github.com/hanwen/go-fuse/fuse"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status struct {
	Code github_com_hanwen_go_fuse_fuse.Status `protobuf:"varint,1,opt,name=Code,proto3,casttype=github.com/hanwen/go-fuse/fuse.Status" json:"Code,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}

type Owner struct {
	Uid uint32 `protobuf:"varint,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	Gid uint32 `protobuf:"varint,2,opt,name=Gid,proto3" json:"Gid,omitempty"`
}

func (m *Owner) Reset()      { *m = Owner{} }
func (*Owner) ProtoMessage() {}

type Context struct {
	Owner *Owner `protobuf:"bytes,1,opt,name=Owner" json:"Owner,omitempty"`
	Pid   uint32 `protobuf:"varint,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
}

func (m *Context) Reset()      { *m = Context{} }
func (*Context) ProtoMessage() {}

func (m *Context) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

type StringRequest struct {
}

func (m *StringRequest) Reset()      { *m = StringRequest{} }
func (*StringRequest) ProtoMessage() {}

type StringResponse struct {
	String_ string `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
}

func (m *StringResponse) Reset()      { *m = StringResponse{} }
func (*StringResponse) ProtoMessage() {}

type SetDebugRequest struct {
	Debug bool `protobuf:"varint,1,opt,name=Debug,proto3" json:"Debug,omitempty"`
}

func (m *SetDebugRequest) Reset()      { *m = SetDebugRequest{} }
func (*SetDebugRequest) ProtoMessage() {}

type SetDebugResponse struct {
}

func (m *SetDebugResponse) Reset()      { *m = SetDebugResponse{} }
func (*SetDebugResponse) ProtoMessage() {}

type Attr struct {
	Ino       uint64 `protobuf:"varint,1,opt,name=Ino,proto3" json:"Ino,omitempty"`
	SizeAttr  uint64 `protobuf:"varint,2,opt,name=SizeAttr,proto3" json:"SizeAttr,omitempty"`
	Blocks    uint64 `protobuf:"varint,3,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	Atime     uint64 `protobuf:"varint,4,opt,name=Atime,proto3" json:"Atime,omitempty"`
	Mtime     uint64 `protobuf:"varint,5,opt,name=Mtime,proto3" json:"Mtime,omitempty"`
	Ctime     uint64 `protobuf:"varint,6,opt,name=Ctime,proto3" json:"Ctime,omitempty"`
	Atimensec uint32 `protobuf:"varint,7,opt,name=Atimensec,proto3" json:"Atimensec,omitempty"`
	Mtimensec uint32 `protobuf:"varint,8,opt,name=Mtimensec,proto3" json:"Mtimensec,omitempty"`
	Ctimensec uint32 `protobuf:"varint,9,opt,name=Ctimensec,proto3" json:"Ctimensec,omitempty"`
	Mode      uint32 `protobuf:"varint,10,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Nlink     uint32 `protobuf:"varint,11,opt,name=Nlink,proto3" json:"Nlink,omitempty"`
	Owner     *Owner `protobuf:"bytes,12,opt,name=Owner" json:"Owner,omitempty"`
	Rdev      uint32 `protobuf:"varint,13,opt,name=Rdev,proto3" json:"Rdev,omitempty"`
	Blksize   uint32 `protobuf:"varint,14,opt,name=Blksize,proto3" json:"Blksize,omitempty"`
	Padding   uint32 `protobuf:"varint,15,opt,name=Padding,proto3" json:"Padding,omitempty"`
}

func (m *Attr) Reset()      { *m = Attr{} }
func (*Attr) ProtoMessage() {}

func (m *Attr) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

type GetAttrRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *GetAttrRequest) Reset()      { *m = GetAttrRequest{} }
func (*GetAttrRequest) ProtoMessage() {}

func (m *GetAttrRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetAttrResponse struct {
	Attr   *Attr   `protobuf:"bytes,1,opt,name=Attr" json:"Attr,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *GetAttrResponse) Reset()      { *m = GetAttrResponse{} }
func (*GetAttrResponse) ProtoMessage() {}

func (m *GetAttrResponse) GetAttr() *Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (m *GetAttrResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ChmodRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode    uint32   `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *ChmodRequest) Reset()      { *m = ChmodRequest{} }
func (*ChmodRequest) ProtoMessage() {}

func (m *ChmodRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type ChmodResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *ChmodResponse) Reset()      { *m = ChmodResponse{} }
func (*ChmodResponse) ProtoMessage() {}

func (m *ChmodResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ChownRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	UID     uint32   `protobuf:"varint,2,opt,name=UID,proto3" json:"UID,omitempty"`
	GID     uint32   `protobuf:"varint,3,opt,name=GID,proto3" json:"GID,omitempty"`
	Context *Context `protobuf:"bytes,4,opt,name=Context" json:"Context,omitempty"`
}

func (m *ChownRequest) Reset()      { *m = ChownRequest{} }
func (*ChownRequest) ProtoMessage() {}

func (m *ChownRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type ChownResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *ChownResponse) Reset()      { *m = ChownResponse{} }
func (*ChownResponse) ProtoMessage() {}

func (m *ChownResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type UtimensRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Atime   uint64   `protobuf:"varint,2,opt,name=Atime,proto3" json:"Atime,omitempty"`
	Mtime   uint64   `protobuf:"varint,3,opt,name=Mtime,proto3" json:"Mtime,omitempty"`
	Context *Context `protobuf:"bytes,4,opt,name=Context" json:"Context,omitempty"`
}

func (m *UtimensRequest) Reset()      { *m = UtimensRequest{} }
func (*UtimensRequest) ProtoMessage() {}

func (m *UtimensRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type UtimensResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *UtimensResponse) Reset()      { *m = UtimensResponse{} }
func (*UtimensResponse) ProtoMessage() {}

func (m *UtimensResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type TruncateRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Size_   uint64   `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *TruncateRequest) Reset()      { *m = TruncateRequest{} }
func (*TruncateRequest) ProtoMessage() {}

func (m *TruncateRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type TruncateResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *TruncateResponse) Reset()      { *m = TruncateResponse{} }
func (*TruncateResponse) ProtoMessage() {}

func (m *TruncateResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type AccessRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode    uint32   `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *AccessRequest) Reset()      { *m = AccessRequest{} }
func (*AccessRequest) ProtoMessage() {}

func (m *AccessRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type AccessResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *AccessResponse) Reset()      { *m = AccessResponse{} }
func (*AccessResponse) ProtoMessage() {}

func (m *AccessResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type LinkRequest struct {
	OldName string   `protobuf:"bytes,1,opt,name=OldName,proto3" json:"OldName,omitempty"`
	NewName string   `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *LinkRequest) Reset()      { *m = LinkRequest{} }
func (*LinkRequest) ProtoMessage() {}

func (m *LinkRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type LinkResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *LinkResponse) Reset()      { *m = LinkResponse{} }
func (*LinkResponse) ProtoMessage() {}

func (m *LinkResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type MkdirRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode    uint32   `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *MkdirRequest) Reset()      { *m = MkdirRequest{} }
func (*MkdirRequest) ProtoMessage() {}

func (m *MkdirRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type MkdirResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *MkdirResponse) Reset()      { *m = MkdirResponse{} }
func (*MkdirResponse) ProtoMessage() {}

func (m *MkdirResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type MknodRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Mode    uint32   `protobuf:"varint,2,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Dev     uint64   `protobuf:"varint,3,opt,name=Dev,proto3" json:"Dev,omitempty"`
	Context *Context `protobuf:"bytes,4,opt,name=Context" json:"Context,omitempty"`
}

func (m *MknodRequest) Reset()      { *m = MknodRequest{} }
func (*MknodRequest) ProtoMessage() {}

func (m *MknodRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type MknodResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *MknodResponse) Reset()      { *m = MknodResponse{} }
func (*MknodResponse) ProtoMessage() {}

func (m *MknodResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type RenameRequest struct {
	OldName string   `protobuf:"bytes,1,opt,name=OldName,proto3" json:"OldName,omitempty"`
	NewName string   `protobuf:"bytes,2,opt,name=NewName,proto3" json:"NewName,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *RenameRequest) Reset()      { *m = RenameRequest{} }
func (*RenameRequest) ProtoMessage() {}

func (m *RenameRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type RenameResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *RenameResponse) Reset()      { *m = RenameResponse{} }
func (*RenameResponse) ProtoMessage() {}

func (m *RenameResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type RmdirRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *RmdirRequest) Reset()      { *m = RmdirRequest{} }
func (*RmdirRequest) ProtoMessage() {}

func (m *RmdirRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type RmdirResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *RmdirResponse) Reset()      { *m = RmdirResponse{} }
func (*RmdirResponse) ProtoMessage() {}

func (m *RmdirResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type UnlinkRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *UnlinkRequest) Reset()      { *m = UnlinkRequest{} }
func (*UnlinkRequest) ProtoMessage() {}

func (m *UnlinkRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type UnlinkResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *UnlinkResponse) Reset()      { *m = UnlinkResponse{} }
func (*UnlinkResponse) ProtoMessage() {}

func (m *UnlinkResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetXAttrRequest struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Attribute string   `protobuf:"bytes,2,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	Context   *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *GetXAttrRequest) Reset()      { *m = GetXAttrRequest{} }
func (*GetXAttrRequest) ProtoMessage() {}

func (m *GetXAttrRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type GetXAttrResponse struct {
	Data   []byte  `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *GetXAttrResponse) Reset()      { *m = GetXAttrResponse{} }
func (*GetXAttrResponse) ProtoMessage() {}

func (m *GetXAttrResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ListXAttrRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *ListXAttrRequest) Reset()      { *m = ListXAttrRequest{} }
func (*ListXAttrRequest) ProtoMessage() {}

func (m *ListXAttrRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type ListXAttrResponse struct {
	Attributes []string `protobuf:"bytes,1,rep,name=Attributes" json:"Attributes,omitempty"`
	Status     *Status  `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *ListXAttrResponse) Reset()      { *m = ListXAttrResponse{} }
func (*ListXAttrResponse) ProtoMessage() {}

func (m *ListXAttrResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type RemoveXAttrRequest struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Attribute string   `protobuf:"bytes,2,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	Context   *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *RemoveXAttrRequest) Reset()      { *m = RemoveXAttrRequest{} }
func (*RemoveXAttrRequest) ProtoMessage() {}

func (m *RemoveXAttrRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type RemoveXAttrResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *RemoveXAttrResponse) Reset()      { *m = RemoveXAttrResponse{} }
func (*RemoveXAttrResponse) ProtoMessage() {}

func (m *RemoveXAttrResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SetXAttrRequest struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Attribute string   `protobuf:"bytes,2,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	Data      []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Flags     int32    `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Context   *Context `protobuf:"bytes,5,opt,name=Context" json:"Context,omitempty"`
}

func (m *SetXAttrRequest) Reset()      { *m = SetXAttrRequest{} }
func (*SetXAttrRequest) ProtoMessage() {}

func (m *SetXAttrRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type SetXAttrResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *SetXAttrResponse) Reset()      { *m = SetXAttrResponse{} }
func (*SetXAttrResponse) ProtoMessage() {}

func (m *SetXAttrResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type File struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *File) Reset()      { *m = File{} }
func (*File) ProtoMessage() {}

type OpenRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Flags   uint32   `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *OpenRequest) Reset()      { *m = OpenRequest{} }
func (*OpenRequest) ProtoMessage() {}

func (m *OpenRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type OpenResponse struct {
	File   *File   `protobuf:"bytes,1,opt,name=File" json:"File,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *OpenResponse) Reset()      { *m = OpenResponse{} }
func (*OpenResponse) ProtoMessage() {}

func (m *OpenResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *OpenResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type CreateRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Flags   uint32   `protobuf:"varint,2,opt,name=Flags,proto3" json:"Flags,omitempty"`
	Mode    uint32   `protobuf:"varint,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Context *Context `protobuf:"bytes,4,opt,name=Context" json:"Context,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}

func (m *CreateRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type CreateResponse struct {
	File    *File    `protobuf:"bytes,1,opt,name=File" json:"File,omitempty"`
	Status  *Status  `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
	Context *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *CreateResponse) Reset()      { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage() {}

func (m *CreateResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *CreateResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CreateResponse) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type DirEntry struct {
	Mode uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *DirEntry) Reset()      { *m = DirEntry{} }
func (*DirEntry) ProtoMessage() {}

type OpenDirRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *OpenDirRequest) Reset()      { *m = OpenDirRequest{} }
func (*OpenDirRequest) ProtoMessage() {}

func (m *OpenDirRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type OpenDirResponse struct {
	Dirs   []*DirEntry `protobuf:"bytes,1,rep,name=Dirs" json:"Dirs,omitempty"`
	Status *Status     `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *OpenDirResponse) Reset()      { *m = OpenDirResponse{} }
func (*OpenDirResponse) ProtoMessage() {}

func (m *OpenDirResponse) GetDirs() []*DirEntry {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *OpenDirResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type SymlinkRequest struct {
	Value    string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	LinkName string   `protobuf:"bytes,2,opt,name=LinkName,proto3" json:"LinkName,omitempty"`
	Context  *Context `protobuf:"bytes,3,opt,name=Context" json:"Context,omitempty"`
}

func (m *SymlinkRequest) Reset()      { *m = SymlinkRequest{} }
func (*SymlinkRequest) ProtoMessage() {}

func (m *SymlinkRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type SymlinkResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *SymlinkResponse) Reset()      { *m = SymlinkResponse{} }
func (*SymlinkResponse) ProtoMessage() {}

func (m *SymlinkResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReadlinkRequest struct {
	Name    string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Context *Context `protobuf:"bytes,2,opt,name=Context" json:"Context,omitempty"`
}

func (m *ReadlinkRequest) Reset()      { *m = ReadlinkRequest{} }
func (*ReadlinkRequest) ProtoMessage() {}

func (m *ReadlinkRequest) GetContext() *Context {
	if m != nil {
		return m.Context
	}
	return nil
}

type ReadlinkResponse struct {
	Value  string  `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *ReadlinkResponse) Reset()      { *m = ReadlinkResponse{} }
func (*ReadlinkResponse) ProtoMessage() {}

func (m *ReadlinkResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type StatFs struct {
	Blocks  uint64   `protobuf:"varint,1,opt,name=Blocks,proto3" json:"Blocks,omitempty"`
	Bfree   uint64   `protobuf:"varint,2,opt,name=Bfree,proto3" json:"Bfree,omitempty"`
	Bavail  uint64   `protobuf:"varint,3,opt,name=Bavail,proto3" json:"Bavail,omitempty"`
	Files   uint64   `protobuf:"varint,4,opt,name=Files,proto3" json:"Files,omitempty"`
	Ffree   uint64   `protobuf:"varint,5,opt,name=Ffree,proto3" json:"Ffree,omitempty"`
	Bsize   uint64   `protobuf:"varint,6,opt,name=Bsize,proto3" json:"Bsize,omitempty"`
	NameLen uint64   `protobuf:"varint,7,opt,name=NameLen,proto3" json:"NameLen,omitempty"`
	Frsize  uint64   `protobuf:"varint,8,opt,name=Frsize,proto3" json:"Frsize,omitempty"`
	Padding uint64   `protobuf:"varint,9,opt,name=Padding,proto3" json:"Padding,omitempty"`
	Spare   []uint32 `protobuf:"varint,10,rep,name=Spare" json:"Spare,omitempty"`
}

func (m *StatFs) Reset()      { *m = StatFs{} }
func (*StatFs) ProtoMessage() {}

type StatFsRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *StatFsRequest) Reset()      { *m = StatFsRequest{} }
func (*StatFsRequest) ProtoMessage() {}

type StatFsResponse struct {
	StatFs *StatFs `protobuf:"bytes,1,opt,name=StatFs" json:"StatFs,omitempty"`
}

func (m *StatFsResponse) Reset()      { *m = StatFsResponse{} }
func (*StatFsResponse) ProtoMessage() {}

func (m *StatFsResponse) GetStatFs() *StatFs {
	if m != nil {
		return m.StatFs
	}
	return nil
}

func init() {
	proto.RegisterType((*Status)(nil), "pb.Status")
	proto.RegisterType((*Owner)(nil), "pb.Owner")
	proto.RegisterType((*Context)(nil), "pb.Context")
	proto.RegisterType((*StringRequest)(nil), "pb.StringRequest")
	proto.RegisterType((*StringResponse)(nil), "pb.StringResponse")
	proto.RegisterType((*SetDebugRequest)(nil), "pb.SetDebugRequest")
	proto.RegisterType((*SetDebugResponse)(nil), "pb.SetDebugResponse")
	proto.RegisterType((*Attr)(nil), "pb.Attr")
	proto.RegisterType((*GetAttrRequest)(nil), "pb.GetAttrRequest")
	proto.RegisterType((*GetAttrResponse)(nil), "pb.GetAttrResponse")
	proto.RegisterType((*ChmodRequest)(nil), "pb.ChmodRequest")
	proto.RegisterType((*ChmodResponse)(nil), "pb.ChmodResponse")
	proto.RegisterType((*ChownRequest)(nil), "pb.ChownRequest")
	proto.RegisterType((*ChownResponse)(nil), "pb.ChownResponse")
	proto.RegisterType((*UtimensRequest)(nil), "pb.UtimensRequest")
	proto.RegisterType((*UtimensResponse)(nil), "pb.UtimensResponse")
	proto.RegisterType((*TruncateRequest)(nil), "pb.TruncateRequest")
	proto.RegisterType((*TruncateResponse)(nil), "pb.TruncateResponse")
	proto.RegisterType((*AccessRequest)(nil), "pb.AccessRequest")
	proto.RegisterType((*AccessResponse)(nil), "pb.AccessResponse")
	proto.RegisterType((*LinkRequest)(nil), "pb.LinkRequest")
	proto.RegisterType((*LinkResponse)(nil), "pb.LinkResponse")
	proto.RegisterType((*MkdirRequest)(nil), "pb.MkdirRequest")
	proto.RegisterType((*MkdirResponse)(nil), "pb.MkdirResponse")
	proto.RegisterType((*MknodRequest)(nil), "pb.MknodRequest")
	proto.RegisterType((*MknodResponse)(nil), "pb.MknodResponse")
	proto.RegisterType((*RenameRequest)(nil), "pb.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "pb.RenameResponse")
	proto.RegisterType((*RmdirRequest)(nil), "pb.RmdirRequest")
	proto.RegisterType((*RmdirResponse)(nil), "pb.RmdirResponse")
	proto.RegisterType((*UnlinkRequest)(nil), "pb.UnlinkRequest")
	proto.RegisterType((*UnlinkResponse)(nil), "pb.UnlinkResponse")
	proto.RegisterType((*GetXAttrRequest)(nil), "pb.GetXAttrRequest")
	proto.RegisterType((*GetXAttrResponse)(nil), "pb.GetXAttrResponse")
	proto.RegisterType((*ListXAttrRequest)(nil), "pb.ListXAttrRequest")
	proto.RegisterType((*ListXAttrResponse)(nil), "pb.ListXAttrResponse")
	proto.RegisterType((*RemoveXAttrRequest)(nil), "pb.RemoveXAttrRequest")
	proto.RegisterType((*RemoveXAttrResponse)(nil), "pb.RemoveXAttrResponse")
	proto.RegisterType((*SetXAttrRequest)(nil), "pb.SetXAttrRequest")
	proto.RegisterType((*SetXAttrResponse)(nil), "pb.SetXAttrResponse")
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*OpenRequest)(nil), "pb.OpenRequest")
	proto.RegisterType((*OpenResponse)(nil), "pb.OpenResponse")
	proto.RegisterType((*CreateRequest)(nil), "pb.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "pb.CreateResponse")
	proto.RegisterType((*DirEntry)(nil), "pb.DirEntry")
	proto.RegisterType((*OpenDirRequest)(nil), "pb.OpenDirRequest")
	proto.RegisterType((*OpenDirResponse)(nil), "pb.OpenDirResponse")
	proto.RegisterType((*SymlinkRequest)(nil), "pb.SymlinkRequest")
	proto.RegisterType((*SymlinkResponse)(nil), "pb.SymlinkResponse")
	proto.RegisterType((*ReadlinkRequest)(nil), "pb.ReadlinkRequest")
	proto.RegisterType((*ReadlinkResponse)(nil), "pb.ReadlinkResponse")
	proto.RegisterType((*StatFs)(nil), "pb.StatFs")
	proto.RegisterType((*StatFsRequest)(nil), "pb.StatFsRequest")
	proto.RegisterType((*StatFsResponse)(nil), "pb.StatFsResponse")
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Owner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Owner{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Gid: "+fmt.Sprintf("%#v", this.Gid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Context) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Context{")
	if this.Owner != nil {
		s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	}
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StringRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StringResponse{")
	s = append(s, "String_: "+fmt.Sprintf("%#v", this.String_)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetDebugRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SetDebugRequest{")
	s = append(s, "Debug: "+fmt.Sprintf("%#v", this.Debug)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetDebugResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.SetDebugResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&pb.Attr{")
	s = append(s, "Ino: "+fmt.Sprintf("%#v", this.Ino)+",\n")
	s = append(s, "SizeAttr: "+fmt.Sprintf("%#v", this.SizeAttr)+",\n")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	s = append(s, "Atime: "+fmt.Sprintf("%#v", this.Atime)+",\n")
	s = append(s, "Mtime: "+fmt.Sprintf("%#v", this.Mtime)+",\n")
	s = append(s, "Ctime: "+fmt.Sprintf("%#v", this.Ctime)+",\n")
	s = append(s, "Atimensec: "+fmt.Sprintf("%#v", this.Atimensec)+",\n")
	s = append(s, "Mtimensec: "+fmt.Sprintf("%#v", this.Mtimensec)+",\n")
	s = append(s, "Ctimensec: "+fmt.Sprintf("%#v", this.Ctimensec)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Nlink: "+fmt.Sprintf("%#v", this.Nlink)+",\n")
	if this.Owner != nil {
		s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	}
	s = append(s, "Rdev: "+fmt.Sprintf("%#v", this.Rdev)+",\n")
	s = append(s, "Blksize: "+fmt.Sprintf("%#v", this.Blksize)+",\n")
	s = append(s, "Padding: "+fmt.Sprintf("%#v", this.Padding)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAttrRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetAttrRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAttrResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetAttrResponse{")
	if this.Attr != nil {
		s = append(s, "Attr: "+fmt.Sprintf("%#v", this.Attr)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChmodRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ChmodRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChmodResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ChmodResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChownRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ChownRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "UID: "+fmt.Sprintf("%#v", this.UID)+",\n")
	s = append(s, "GID: "+fmt.Sprintf("%#v", this.GID)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChownResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ChownResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UtimensRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.UtimensRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Atime: "+fmt.Sprintf("%#v", this.Atime)+",\n")
	s = append(s, "Mtime: "+fmt.Sprintf("%#v", this.Mtime)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UtimensResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UtimensResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TruncateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TruncateRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TruncateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TruncateResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AccessRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AccessResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LinkRequest{")
	s = append(s, "OldName: "+fmt.Sprintf("%#v", this.OldName)+",\n")
	s = append(s, "NewName: "+fmt.Sprintf("%#v", this.NewName)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LinkResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MkdirRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.MkdirRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MkdirResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MkdirResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MknodRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.MknodRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Dev: "+fmt.Sprintf("%#v", this.Dev)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MknodResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MknodResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenameRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RenameRequest{")
	s = append(s, "OldName: "+fmt.Sprintf("%#v", this.OldName)+",\n")
	s = append(s, "NewName: "+fmt.Sprintf("%#v", this.NewName)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenameResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RenameResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RmdirRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RmdirRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RmdirResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RmdirResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UnlinkRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnlinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UnlinkResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetXAttrRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GetXAttrRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Attribute: "+fmt.Sprintf("%#v", this.Attribute)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetXAttrResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetXAttrResponse{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListXAttrRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListXAttrRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListXAttrResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListXAttrResponse{")
	s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveXAttrRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RemoveXAttrRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Attribute: "+fmt.Sprintf("%#v", this.Attribute)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveXAttrResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RemoveXAttrResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetXAttrRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SetXAttrRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Attribute: "+fmt.Sprintf("%#v", this.Attribute)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetXAttrResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SetXAttrResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *File) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.File{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.OpenRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.OpenResponse{")
	if this.File != nil {
		s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CreateRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateResponse{")
	if this.File != nil {
		s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DirEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DirEntry{")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenDirRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.OpenDirRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenDirResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.OpenDirResponse{")
	if this.Dirs != nil {
		s = append(s, "Dirs: "+fmt.Sprintf("%#v", this.Dirs)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SymlinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SymlinkRequest{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "LinkName: "+fmt.Sprintf("%#v", this.LinkName)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SymlinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SymlinkResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadlinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ReadlinkRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Context != nil {
		s = append(s, "Context: "+fmt.Sprintf("%#v", this.Context)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReadlinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ReadlinkResponse{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatFs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.StatFs{")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	s = append(s, "Bfree: "+fmt.Sprintf("%#v", this.Bfree)+",\n")
	s = append(s, "Bavail: "+fmt.Sprintf("%#v", this.Bavail)+",\n")
	s = append(s, "Files: "+fmt.Sprintf("%#v", this.Files)+",\n")
	s = append(s, "Ffree: "+fmt.Sprintf("%#v", this.Ffree)+",\n")
	s = append(s, "Bsize: "+fmt.Sprintf("%#v", this.Bsize)+",\n")
	s = append(s, "NameLen: "+fmt.Sprintf("%#v", this.NameLen)+",\n")
	s = append(s, "Frsize: "+fmt.Sprintf("%#v", this.Frsize)+",\n")
	s = append(s, "Padding: "+fmt.Sprintf("%#v", this.Padding)+",\n")
	s = append(s, "Spare: "+fmt.Sprintf("%#v", this.Spare)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatFsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StatFsRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatFsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StatFsResponse{")
	if this.StatFs != nil {
		s = append(s, "StatFs: "+fmt.Sprintf("%#v", this.StatFs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPathfs(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPathfs(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PathFS service

type PathFSClient interface {
	// Used for pretty printing.
	String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// If called, provide debug output through the log package.
	SetDebug(ctx context.Context, in *SetDebugRequest, opts ...grpc.CallOption) (*SetDebugResponse, error)
	// Attributes.  This function is the main entry point, through
	// which FUSE discovers which files and directories exist.
	//
	// If the filesystem wants to implement hard-links, it should
	// return consistent non-zero FileInfo.Ino data.  Using
	// hardlinks incurs a performance hit.
	GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error)
	Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*ChmodResponse, error)
	Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*ChownResponse, error)
	Utimens(ctx context.Context, in *UtimensRequest, opts ...grpc.CallOption) (*UtimensResponse, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error)
	Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error)
	Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error)
	// Extended attributes.
	GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error)
	ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error)
	RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error)
	SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error)
	// File handling.  If opening for writing, the file's mtime
	// should be updated too.
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Directory handling
	OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error)
	// Symlinks.
	Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error)
	Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error)
	StatFs(ctx context.Context, in *StatFsRequest, opts ...grpc.CallOption) (*StatFsResponse, error)
}

type pathFSClient struct {
	cc *grpc.ClientConn
}

func NewPathFSClient(cc *grpc.ClientConn) PathFSClient {
	return &pathFSClient{cc}
}

func (c *pathFSClient) String(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/String", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) SetDebug(ctx context.Context, in *SetDebugRequest, opts ...grpc.CallOption) (*SetDebugResponse, error) {
	out := new(SetDebugResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/SetDebug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) GetAttr(ctx context.Context, in *GetAttrRequest, opts ...grpc.CallOption) (*GetAttrResponse, error) {
	out := new(GetAttrResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/GetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Chmod(ctx context.Context, in *ChmodRequest, opts ...grpc.CallOption) (*ChmodResponse, error) {
	out := new(ChmodResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Chmod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Chown(ctx context.Context, in *ChownRequest, opts ...grpc.CallOption) (*ChownResponse, error) {
	out := new(ChownResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Chown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Utimens(ctx context.Context, in *UtimensRequest, opts ...grpc.CallOption) (*UtimensResponse, error) {
	out := new(UtimensResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Utimens", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	out := new(TruncateResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Truncate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Access", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Link(ctx context.Context, in *LinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Link", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Mkdir(ctx context.Context, in *MkdirRequest, opts ...grpc.CallOption) (*MkdirResponse, error) {
	out := new(MkdirResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Mkdir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Mknod(ctx context.Context, in *MknodRequest, opts ...grpc.CallOption) (*MknodResponse, error) {
	out := new(MknodResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Mknod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Rmdir(ctx context.Context, in *RmdirRequest, opts ...grpc.CallOption) (*RmdirResponse, error) {
	out := new(RmdirResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Rmdir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Unlink(ctx context.Context, in *UnlinkRequest, opts ...grpc.CallOption) (*UnlinkResponse, error) {
	out := new(UnlinkResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Unlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) GetXAttr(ctx context.Context, in *GetXAttrRequest, opts ...grpc.CallOption) (*GetXAttrResponse, error) {
	out := new(GetXAttrResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/GetXAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) ListXAttr(ctx context.Context, in *ListXAttrRequest, opts ...grpc.CallOption) (*ListXAttrResponse, error) {
	out := new(ListXAttrResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/ListXAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) RemoveXAttr(ctx context.Context, in *RemoveXAttrRequest, opts ...grpc.CallOption) (*RemoveXAttrResponse, error) {
	out := new(RemoveXAttrResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/RemoveXAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) SetXAttr(ctx context.Context, in *SetXAttrRequest, opts ...grpc.CallOption) (*SetXAttrResponse, error) {
	out := new(SetXAttrResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/SetXAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Open", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) OpenDir(ctx context.Context, in *OpenDirRequest, opts ...grpc.CallOption) (*OpenDirResponse, error) {
	out := new(OpenDirResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/OpenDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Symlink(ctx context.Context, in *SymlinkRequest, opts ...grpc.CallOption) (*SymlinkResponse, error) {
	out := new(SymlinkResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Symlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) Readlink(ctx context.Context, in *ReadlinkRequest, opts ...grpc.CallOption) (*ReadlinkResponse, error) {
	out := new(ReadlinkResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/Readlink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathFSClient) StatFs(ctx context.Context, in *StatFsRequest, opts ...grpc.CallOption) (*StatFsResponse, error) {
	out := new(StatFsResponse)
	err := grpc.Invoke(ctx, "/pb.PathFS/StatFs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PathFS service

type PathFSServer interface {
	// Used for pretty printing.
	String(context.Context, *StringRequest) (*StringResponse, error)
	// If called, provide debug output through the log package.
	SetDebug(context.Context, *SetDebugRequest) (*SetDebugResponse, error)
	// Attributes.  This function is the main entry point, through
	// which FUSE discovers which files and directories exist.
	//
	// If the filesystem wants to implement hard-links, it should
	// return consistent non-zero FileInfo.Ino data.  Using
	// hardlinks incurs a performance hit.
	GetAttr(context.Context, *GetAttrRequest) (*GetAttrResponse, error)
	Chmod(context.Context, *ChmodRequest) (*ChmodResponse, error)
	Chown(context.Context, *ChownRequest) (*ChownResponse, error)
	Utimens(context.Context, *UtimensRequest) (*UtimensResponse, error)
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	Access(context.Context, *AccessRequest) (*AccessResponse, error)
	Link(context.Context, *LinkRequest) (*LinkResponse, error)
	Mkdir(context.Context, *MkdirRequest) (*MkdirResponse, error)
	Mknod(context.Context, *MknodRequest) (*MknodResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Rmdir(context.Context, *RmdirRequest) (*RmdirResponse, error)
	Unlink(context.Context, *UnlinkRequest) (*UnlinkResponse, error)
	// Extended attributes.
	GetXAttr(context.Context, *GetXAttrRequest) (*GetXAttrResponse, error)
	ListXAttr(context.Context, *ListXAttrRequest) (*ListXAttrResponse, error)
	RemoveXAttr(context.Context, *RemoveXAttrRequest) (*RemoveXAttrResponse, error)
	SetXAttr(context.Context, *SetXAttrRequest) (*SetXAttrResponse, error)
	// File handling.  If opening for writing, the file's mtime
	// should be updated too.
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Directory handling
	OpenDir(context.Context, *OpenDirRequest) (*OpenDirResponse, error)
	// Symlinks.
	Symlink(context.Context, *SymlinkRequest) (*SymlinkResponse, error)
	Readlink(context.Context, *ReadlinkRequest) (*ReadlinkResponse, error)
	StatFs(context.Context, *StatFsRequest) (*StatFsResponse, error)
}

func RegisterPathFSServer(s *grpc.Server, srv PathFSServer) {
	s.RegisterService(&_PathFS_serviceDesc, srv)
}

func _PathFS_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).String(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_SetDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetDebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).SetDebug(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_GetAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).GetAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Chmod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Chown(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Utimens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UtimensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Utimens(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Truncate(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Access(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Link(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MkdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Mkdir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Mknod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MknodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Mknod(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Rename(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Rmdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RmdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Rmdir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Unlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Unlink(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_GetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).GetXAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_ListXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).ListXAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_RemoveXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RemoveXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).RemoveXAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_SetXAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetXAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).SetXAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Open(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_OpenDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(OpenDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).OpenDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Symlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SymlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Symlink(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_Readlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadlinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).Readlink(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PathFS_StatFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PathFSServer).StatFs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PathFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PathFS",
	HandlerType: (*PathFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "String",
			Handler:    _PathFS_String_Handler,
		},
		{
			MethodName: "SetDebug",
			Handler:    _PathFS_SetDebug_Handler,
		},
		{
			MethodName: "GetAttr",
			Handler:    _PathFS_GetAttr_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _PathFS_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _PathFS_Chown_Handler,
		},
		{
			MethodName: "Utimens",
			Handler:    _PathFS_Utimens_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _PathFS_Truncate_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _PathFS_Access_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _PathFS_Link_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _PathFS_Mkdir_Handler,
		},
		{
			MethodName: "Mknod",
			Handler:    _PathFS_Mknod_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _PathFS_Rename_Handler,
		},
		{
			MethodName: "Rmdir",
			Handler:    _PathFS_Rmdir_Handler,
		},
		{
			MethodName: "Unlink",
			Handler:    _PathFS_Unlink_Handler,
		},
		{
			MethodName: "GetXAttr",
			Handler:    _PathFS_GetXAttr_Handler,
		},
		{
			MethodName: "ListXAttr",
			Handler:    _PathFS_ListXAttr_Handler,
		},
		{
			MethodName: "RemoveXAttr",
			Handler:    _PathFS_RemoveXAttr_Handler,
		},
		{
			MethodName: "SetXAttr",
			Handler:    _PathFS_SetXAttr_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _PathFS_Open_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PathFS_Create_Handler,
		},
		{
			MethodName: "OpenDir",
			Handler:    _PathFS_OpenDir_Handler,
		},
		{
			MethodName: "Symlink",
			Handler:    _PathFS_Symlink_Handler,
		},
		{
			MethodName: "Readlink",
			Handler:    _PathFS_Readlink_Handler,
		},
		{
			MethodName: "StatFs",
			Handler:    _PathFS_StatFs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Owner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Owner{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Gid:` + fmt.Sprintf("%v", this.Gid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Context) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Context{`,
		`Owner:` + strings.Replace(fmt.Sprintf("%v", this.Owner), "Owner", "Owner", 1) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StringResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringResponse{`,
		`String_:` + fmt.Sprintf("%v", this.String_) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDebugRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDebugRequest{`,
		`Debug:` + fmt.Sprintf("%v", this.Debug) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDebugResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDebugResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Attr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attr{`,
		`Ino:` + fmt.Sprintf("%v", this.Ino) + `,`,
		`SizeAttr:` + fmt.Sprintf("%v", this.SizeAttr) + `,`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`Atime:` + fmt.Sprintf("%v", this.Atime) + `,`,
		`Mtime:` + fmt.Sprintf("%v", this.Mtime) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`Atimensec:` + fmt.Sprintf("%v", this.Atimensec) + `,`,
		`Mtimensec:` + fmt.Sprintf("%v", this.Mtimensec) + `,`,
		`Ctimensec:` + fmt.Sprintf("%v", this.Ctimensec) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Nlink:` + fmt.Sprintf("%v", this.Nlink) + `,`,
		`Owner:` + strings.Replace(fmt.Sprintf("%v", this.Owner), "Owner", "Owner", 1) + `,`,
		`Rdev:` + fmt.Sprintf("%v", this.Rdev) + `,`,
		`Blksize:` + fmt.Sprintf("%v", this.Blksize) + `,`,
		`Padding:` + fmt.Sprintf("%v", this.Padding) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAttrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAttrRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAttrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAttrResponse{`,
		`Attr:` + strings.Replace(fmt.Sprintf("%v", this.Attr), "Attr", "Attr", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChmodRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChmodRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChmodResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChmodResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChownRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChownRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`GID:` + fmt.Sprintf("%v", this.GID) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChownResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChownResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UtimensRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UtimensRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Atime:` + fmt.Sprintf("%v", this.Atime) + `,`,
		`Mtime:` + fmt.Sprintf("%v", this.Mtime) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UtimensResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UtimensResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TruncateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TruncateRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TruncateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TruncateResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkRequest{`,
		`OldName:` + fmt.Sprintf("%v", this.OldName) + `,`,
		`NewName:` + fmt.Sprintf("%v", this.NewName) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MkdirRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MkdirRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MkdirResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MkdirResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MknodRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MknodRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Dev:` + fmt.Sprintf("%v", this.Dev) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MknodResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MknodResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenameRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenameRequest{`,
		`OldName:` + fmt.Sprintf("%v", this.OldName) + `,`,
		`NewName:` + fmt.Sprintf("%v", this.NewName) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenameResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenameResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RmdirRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RmdirRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RmdirResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RmdirResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlinkRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnlinkResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetXAttrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetXAttrRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attribute:` + fmt.Sprintf("%v", this.Attribute) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetXAttrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetXAttrResponse{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListXAttrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListXAttrRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListXAttrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListXAttrResponse{`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveXAttrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveXAttrRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attribute:` + fmt.Sprintf("%v", this.Attribute) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveXAttrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveXAttrResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetXAttrRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetXAttrRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attribute:` + fmt.Sprintf("%v", this.Attribute) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetXAttrResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetXAttrResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *File) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&File{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenResponse{`,
		`File:` + strings.Replace(fmt.Sprintf("%v", this.File), "File", "File", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`File:` + strings.Replace(fmt.Sprintf("%v", this.File), "File", "File", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DirEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DirEntry{`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenDirRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenDirRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenDirResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenDirResponse{`,
		`Dirs:` + strings.Replace(fmt.Sprintf("%v", this.Dirs), "DirEntry", "DirEntry", 1) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SymlinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SymlinkRequest{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`LinkName:` + fmt.Sprintf("%v", this.LinkName) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SymlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SymlinkResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadlinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadlinkRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "Context", "Context", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadlinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadlinkResponse{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatFs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatFs{`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`Bfree:` + fmt.Sprintf("%v", this.Bfree) + `,`,
		`Bavail:` + fmt.Sprintf("%v", this.Bavail) + `,`,
		`Files:` + fmt.Sprintf("%v", this.Files) + `,`,
		`Ffree:` + fmt.Sprintf("%v", this.Ffree) + `,`,
		`Bsize:` + fmt.Sprintf("%v", this.Bsize) + `,`,
		`NameLen:` + fmt.Sprintf("%v", this.NameLen) + `,`,
		`Frsize:` + fmt.Sprintf("%v", this.Frsize) + `,`,
		`Padding:` + fmt.Sprintf("%v", this.Padding) + `,`,
		`Spare:` + fmt.Sprintf("%v", this.Spare) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatFsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatFsRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatFsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatFsResponse{`,
		`StatFs:` + strings.Replace(fmt.Sprintf("%v", this.StatFs), "StatFs", "StatFs", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPathfs(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
